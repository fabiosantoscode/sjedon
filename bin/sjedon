#!/usr/bin/env node
'use strict';

var repl = require('repl');
var esprima = require('esprima');
var Sjedon = require('../lib/sjedon.js');

function inheritFrom(obj) {
    var f = function () {};
    f.prototype = obj;
    return new f;
}

var proc = inheritFrom(process);
proc.argv = args;
var nodeGlobals = { console: console, module: {}, require: require, process: proc }

function runRepl() {
    new repl.REPLServer({
        prompt: 'sjedon> ',
        eval: sjedonReplEval
    });

    var sjedon = new Sjedon(esprima.parse(''), { global: nodeGlobals });

    function sjedonReplEval(x, _, __, done) {
        try {
            sjedon.ast = esprima.parse(x);
        } catch(e) {
            // The REPL will try to give me the whole thing between parens.
            // Not sure why yet.
            if (x[0] === '(') {
                x = x.replace(/^\(/, '').replace(/\)$/, '');
                return sjedonReplEval.apply(this, [x].concat([].slice.call(arguments, 1)));
            }
            return done(null, e);
        }

        try {
            if (x[0] === '(' && sjedon.ast.body[0].type === 'ExpressionStatement') {
                // It's an expression, so eval it and show the result.
                return done(null, sjedon.evalExpression(sjedon.ast.body[0].expression))
            } else {
                // It's a statement, so eval it.
                return done(null, sjedon.eval());
            }
        } catch(e) {
            return done(e);
        }
    }
}

function runScript(script, args) {
    var fs = require('fs');
    var program = fs.readFileSync(script, { encoding: 'utf-8' })
    program = program.replace(/^\#!.+/, '');

    var sjedon = new Sjedon(esprima.parse(program), {
        global: nodeGlobals
    })

    sjedon.eval();
}

var args = process.argv.slice(1)

if (process.argv.length > 2) {
    // The script name is argv[2], and we pass it everything except
    // argv[0] which is node
    runScript(process.argv[2], process.argv.slice(1));
} else {
    runRepl();
}

